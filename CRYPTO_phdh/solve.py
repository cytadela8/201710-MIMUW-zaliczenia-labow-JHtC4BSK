#!/usr/bin/env python2

#from Crypto.Util.number import isPrime, getPrime
from hashlib import sha256


p = 92662085594063556253329986513933812316402788683498735641001489726951736806610732225529685842357018038686015278605606327046345791802536753917248887535118793029263950483740845183630303012259559517099120832013478387767205744919129087746406351139840547382971746712061594128467592289876957128569149329176931638523
a = 25302383968402608036231974153145220490226914860377230537392642538836923763965177897265863453483987401668525861723199820739255142836794307447089204522440934113008271784249851533145398193750195627058117809952281956011564512120737585732117758019658107981587348943033987766629458607034095713800640568042245195452503783
b = -2391335235166098076104955991866157068900815715856756089081446322631612098193578704323453566816810441252638133003628248275558429337698426725147443853019887115123009718577012099329920864885951996636723042788110642900625841835131673942963049610519234398750730663866297785970170748245297522826135860205483880450381492866 % (p-1)
g = 2
data = ['c482c274521ca4adcbc008ee', '23f84fbce70fb48fb8f709333471d21ef505706690fae9653bff8a729050f70506ed438d5136ce7099c5d0d8114a3dab6eda4bfb94f0f0610a4e8924965cb3caa3ea205c947c6a9b037ee9b3ad127c692791be1062e9521057cc407a', '31c1b9364ba7655d0479163ec89df74b']

print( b)

def deencrypt(key, cipherdata):
    from cryptography.hazmat.backends import default_backend
    from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
    iv = cipherdata[0]
    ciphertext = cipherdata[1]
    tag = cipherdata[2]
    try:
        dencryptor = Cipher(
            algorithms.AES(key),
            modes.GCM(iv, tag),
            backend=default_backend()
        ).decryptor()
    except Exception as e:
        print e
        return e
    dencryptor.authenticate_additional_data('')
    plaintext = dencryptor.update(ciphertext) + dencryptor.finalize()
    return plaintext

A, B = pow(g, a, p), pow(g, b, p)
shared_dh_key = pow(A, b, p)
assert pow(B, a, p) == shared_dh_key
key = sha256(str(shared_dh_key)).digest()
data = map(lambda x: x.decode('hex'), data)


